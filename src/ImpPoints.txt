This file contain some important information regarding the concepts used in this project

1. We are organizing our code using Object-Oriented Programming, that'swhy we need to separate the
   declaration of the class and its implementation. This is where the 'header' file and 'implementation'
   file comes into play. Separating the class declaration from its implementation allows for better organization
   and abstraction of code, making it easier to manage and maintain large projects.

   Header file usually with the '.h' extention contains the class declaration, including the class name,
   member variable, and function prototypes.
   
   Implementation file usually with the '.cpp' extention containts the actual implementation of the class
   function. This is where the member function defined in the header file are iplemented

2. A map is a container that stores elements in 'key-value' pairs, where each element is associated with a unique key.

3. The 'this' pointer is used to retrieve the object's variable hidden by the local variable.
   
   'this' keyword is used to refer to the current object. 
   'this ->' is used to access a variable within the object.

   The assignment this->var = var; sets the value of the objectâ€™s 'var' data member to the value passed as the constructor parameter.
   It allows you to differentiate between the local parameter 'var' and the class member 'var'.
   
   I think 'this->row' changes the value of 'row' globally for usage within all the functions in the class only.

   I think when the name of the class member (variable in the class (outside the function or constructor)) is same as the name of
   function or constructor parameter and if you want to assign the the value passsed to the function or the constructor
   to the class member, then you can use "this -> class_member" to point to the address where the value of the 
   class_member is stored and "= local parameter", to assign the value passed to the function or the constructor to 
   the varible defined in the class or class_member.

   position::position(int row_index, int column_index){
      /*this -> class_member = local parameter*/
      this -> row_index = row_index;
      this -> column_index = column_index;
   }

   If the name of the class member is different from the name of the parameter of the function or the constructor, then you
   don't need to use 'this' pointer as there will be no confusion between the variables and you can directly assign the values.
   like this ---------

   position::position(int row_, int column_){
      row_index = row_;
      column_index = column_;
   }

4. Object is created using constructor. "class_name object_name = constructor"
   During it's creation the code written under constructor is executed

5. "extern" keyword is used to declare a global variable or function that can be accessed
   from any part of the program or from other files included in the program's header.

6. Child class is a class that inherits base class. In child class you have access to all the attributes
   and functions defined in the base class.

7. 'rand' function generates random value from 0 to rand_max-1
   rand % 7; ===> [0, 7) {0, 1, 2, 3, 4, 5, 6}

8. vectorName.erase(iterator)
   iterator is a pointer that points to the element which is to be deleted

9. note that default access is private in C++